package com.lf.designpattern.templatemethod;

/**
 * @data on 2018/4/27 14:30
 * @describe: 　模板方法模式
 */

public class TemplateMethod {
    /**
     * （定义一个操作中的算法的框架，而将一些步骤延迟到子类中。
     * 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。）
     */

    /**
     * 为了防止恶意的操作，一般模板方法都加上final关键字，不允许被覆写。
     *
     * 优点：
     *
     * 1.封装不变部分，扩展可变部分
     * 2.提取公共部分代码，便于维护
     * 3.行为由父类控制，子类实现
     *
     * 缺点：
     *
     * 抽象类定义了部分抽象方法，由子类实现，子类执行的结果影响了父类的结果，也就是子类对父类产生了影响
     *
     * 使用场景
     * 1. 多个子类有公有的方法，并且逻辑基本相同时。
     * 2.重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。
     * 3.重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，
     *  然后通 过钩子函数（见“模板方法模式的扩展”）约束其行为。
     */


}
